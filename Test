pipeline {
    agent any
    environment {
        // Assume these variables represent the result of the Nexus IQ scan
        NEXUS_IQ_RESULT = "medium"  // Can be "low", "medium", "high", etc.
    }
    stages {
        stage('Nexus IQ Scan') {
            steps {
                script {
                    // Simulating Nexus IQ scan output
                    echo "Running Nexus IQ scan..."
                    // Set a result based on the simulated scan outcome (medium in this case)
                    def scanResult = "${env.NEXUS_IQ_RESULT}"
                    
                    if (scanResult == "medium") {
                        // Change stage color to yellow using currentBuild.result
                        currentBuild.result = 'SUCCESS'  // Mark build as successful
                        // Set a custom description to reflect the result
                        currentBuild.description = "Medium Issues Found in Nexus IQ Scan"
                        // Simulate echoing a warning message
                        echo "Warning: Medium issues found in the Nexus IQ scan."
                        // Change the stage color (yellow in this case)
                        script {
                            // Forcefully set the stage color to yellow using input or error actions
                            currentBuild.displayName = "Scan Completed - Medium Issues"
                        }
                    } else {
                        // If no issues or other types of issues, proceed normally
                        echo "No medium issues found, proceeding."
                    }
                }
            }
        }
        stage('Build') {
            steps {
                echo 'Building the project...'
                // Simulate build process
                sh 'echo "Build process complete."'
            }
        }
    }
    post {
        success {
            script {
                echo "Pipeline completed successfully!"
            }
        }
        failure {
            script {
                echo "Pipeline failed."
            }
        }
    }
}








pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                script {
                    // Shell command and update build description
                    def result = sh(script: 'echo "Building version 1.0.0..."', returnStdout: true).trim()
                    currentBuild.description = "Build stage: ${result}"
                    echo "Build step executed."
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Shell command and update build description
                    def result = sh(script: 'echo "Running tests..."', returnStdout: true).trim()
                    currentBuild.description += "<br>Test stage: ${result}"
                    echo "Test step executed."
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Shell command and update build description
                    def result = sh(script: 'echo "Deploying to prod..."', returnStdout: true).trim()
                    currentBuild.description += "<br>Deploy stage: ${result}"
                    echo "Deploy step executed."
                }
            }
        }
    }
    post {
        success {
            script {
                currentBuild.description += "<br>Status: SUCCESS"
            }
        }
        failure {
            script {
                currentBuild.description += "<br>Status: FAILURE"
            }
        }
    }
}



pipeline {
    agent any
    stages {
        stage('Log with Echo') {
            steps {
                script {
                    def stageName = "Build Stage"
                    echo "[INFO] Starting ${stageName}"
                    echo "[WARNING] A potential issue detected in ${stageName}"
                    echo "[ERROR] A critical error occurred in ${stageName}"
                }
            }
        }
    }
}



pipeline {
    agent any
    stages {
        stage('Initialize Logger') {
            steps {
                script {
                    // Import the logger library
                    import java.util.logging.Logger
                    
                    // Create a logger object
                    def logger = Logger.getLogger("JenkinsPipelineLogger")

                    // Log messages
                    logger.info("INFO: Starting the pipeline execution.")
                    logger.warning("WARNING: This is a warning message.")
                    logger.severe("ERROR: This is an error message.")
                }
            }
        }
        stage('Perform Task') {
            steps {
                script {
                    // Continue using the logger object
                    def logger = Logger.getLogger("JenkinsPipelineLogger")
                    logger.info("INFO: Executing some tasks in this stage...")
                    echo "Task executed successfully."
                }
            }
        }
    }
}


cf apps | for /f "tokens=1" %A in ('findstr /r "^[A-Za-z]"') do @echo %A >> test.txt

To add these parameters in a Jenkins job using the **"Add Parameters"** feature, you can follow these steps:

### 1. Adding Platform Parameters:
- **Dropdown 1 (OS Selection)**:
  - Go to your Jenkins job, click on **"Configure"**.
  - Scroll down to **"This project is parameterized"**, check the box.
  - Click on **"Add Parameter"** and select **"Choice Parameter"**.
  - For the **"Name"**, use something like `PLATFORM_OS`.
  - In the **Choices** section, add the operating systems:  
    ```
    Windows
    macOS
    Android
    ```

- **Dropdown 2 (Version Selection)**:
  - Click on **"Add Parameter"** again, and select **"Choice Parameter"**.
  - For the **"Name"**, use something like `PLATFORM_VERSION`.
  - In the **Choices** section, add the corresponding OS versions:
    ```
    Windows 10
    Windows 11
    macOS Big Sur
    macOS Monterey
    Android 11
    Android 12
    ```

### 2. Adding Browser Parameters:
- **Dropdown 1 (Browser Selection)**:
  - Click on **"Add Parameter"** and select **"Choice Parameter"**.
  - For the **"Name"**, use something like `BROWSER_TYPE`.
  - In the **Choices** section, add the browsers:
    ```
    Chrome
    Edge
    Firefox
    ```

- **Dropdown 2 (Browser Version)**:
  - Click on **"Add Parameter"** again, and select **"Choice Parameter"**.
  - For the **"Name"**, use something like `BROWSER_VERSION`.
  - In the **Choices** section, add the versions:
    ```
    121
    122
    latest
    ```

### Optional: Cascading Parameters
If you want to have the second dropdown (version) dependent on the first dropdown (OS/Browser), Jenkins doesnâ€™t support this natively. You can achieve cascading dropdowns with the **"Active Choices"** plugin, which allows dynamic parameters based on the selection of previous ones. This would require scripting within the parameter configuration.
new:

implementation 'com.google.guava:guava:32.1.1-jre'
