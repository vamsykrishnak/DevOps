sed -i "s|{{PRIVATE_KEY}}|$(tr -d '\n' < ~/.ssh/id_rsa)|g" file.json

pipeline {
    agent any

    environment {
        CF_API = 'https://api.run.pivotal.io'          // or your PCF API endpoint
        CF_ORG = 'your-org'
        CF_SPACE = 'your-space'
        CF_USERNAME = credentials('cf-username')       // Jenkins credentials ID
        CF_PASSWORD = credentials('cf-password')       // Jenkins credentials ID
        SERVICE_INSTANCE = 'my-config-server'          // Your Config Server service instance name
        SERVICE_KEY = 'jenkins-service-key'            // Name for the new service key
    }

    stages {
        stage('Login to PCF') {
            steps {
                sh '''
                cf api $CF_API
                cf auth $CF_USERNAME $CF_PASSWORD
                cf target -o $CF_ORG -s $CF_SPACE
                '''
            }
        }

        stage('Create Service Key') {
            steps {
                sh '''
                # Check if service key already exists
                if cf service-key $SERVICE_INSTANCE $SERVICE_KEY; then
                  echo "Service key already exists. Skipping creation."
                else
                  cf create-service-key $SERVICE_INSTANCE $SERVICE_KEY
                fi
                '''
            }
        }

        stage('Retrieve Service Key') {
            steps {
                sh '''
                echo "Retrieving service key credentials..."
                cf service-key $SERVICE_INSTANCE $SERVICE_KEY > service-key.json
                cat service-key.json
                '''
                // Optionally parse with jq or store for further steps
            }
        }
    }
}


env:
  LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG_CLIENT: DEBUG
  LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB_CLIENT: DEBUG
  LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: DEBUG
  LOGGING_LEVEL_REACTOR_NETTY: DEBUG
env:
  LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG_CLIENT: DEBUG

applications:
  - name: your-app-name
    memory: 1G
    instances: 1
    path: target/your-app.jar
    env:
      JAVA_OPTS: >
        -Dspring.application.name=your-app-name
        -Dspring.profiles.active=dev

node {
    stage('Clean Workspace') {
        deleteDir() // This clears the workspace
    }
    
    stage('Checkout Code') {
        // Example Git checkout
        git url: 'https://github.com/your-repo.git', branch: 'main'
    }
    
    stage('Build') {
        sh 'mvn clean install'
    }
}


echo "\033[1mERROR:\033[0m Something went wrong! Please check the logs."

echo "\u001B[32mGreen: Success!\u001B[0m"

pipeline {
    agent any

    stages {
        stage('Example Stage') {
            steps {
                script {
                    // Set build description with colored text
                    setBuildDescription("""
                        <span style="color:green;">Green:</span> Success!<br>
                        <span style="color:yellow;">Yellow:</span> Warning!<br>
                        <span style="color:red;">Red:</span> Failure!
                    """)
                }
            }
        }
    }
}

pipeline {
    agent any

    stages {
        stage('Example Stage') {
            steps {
                script {
                    // Set build description with HTML tags
                    currentBuild.description = '<b>Build is unstable!</b> Check logs for details.'
                }
            }
        }
    }
}

pipeline {
    agent any

    stages {
        stage('Example Stage') {
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                        // Your build logic here
                        echo 'Running some build steps...'

                        // Simulate a condition that causes an error
                        if (someCondition) {
                            error('Custom error message: Something went wrong!')
                        }
                    }
                }
            }
        }
    }
}

pipeline {
    agent any

    stages {
        stage('Example Stage') {
            steps {
                warnError('Stage is unstable due to an error') {
                    script {
                        // Your build logic here
                        echo 'Running some build steps...'

                        // Simulate a condition that causes an error
                        if (someCondition) {
                            error('Custom error message: Something went wrong!')
                        }
                    }
                }
            }
        }
    }
}

ChatGPT

You said:
How to display sonar or nexus iq report url in Jenkins at build history besides build number

2/2

ChatGPT said:
ChatGPT
To display a SonarQube or Nexus IQ report URL in Jenkins' build history, alongside the build number, you can use build badges or build descriptions. Here’s how:

1. Using Build Badges (Preferred)
You can add a clickable badge linking to the SonarQube or Nexus IQ report.

For SonarQube
If you're using the SonarQube Scanner plugin, the report URL is usually stored in SONAR_HOST_URL and the project key. You can add a badge like this:

Install the Badge Plugin in Jenkins.
Add the following post-build script in "Execute Shell" or "Pipeline Script":
SONAR_URL="${SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
echo "SONAR_URL=${SONAR_URL}" > sonar_url.txt
Then, use the Badge Plugin to display the URL in the build history:

def sonarUrl = readFile('sonar_url.txt').trim()
manager.addShortText("🔍 Sonar Report", "grey", "white", "0px", "white", "black", sonarUrl)
For Nexus IQ
If using Nexus IQ, get the report URL dynamically or construct it manually based on your Nexus IQ server.
Modify the script accordingly:
IQ_REPORT_URL="https://nexus-iq-server/report/${BUILD_NUMBER}"
echo "IQ_REPORT_URL=${IQ_REPORT_URL}" > iq_url.txt
Then add the badge:

def iqUrl = readFile('iq_url.txt').trim()
manager.addShortText("📊 IQ Report", "grey", "white", "0px", "white", "black", iqUrl)



pipeline {
    agent any
    environment {
        // Simulate Nexus IQ scan result
        NEXUS_IQ_RESULT = "medium"  // Can be "low", "medium", "high", etc.
    }
    stages {
        stage('Nexus IQ Scan') {
            steps {
                script {
                    // Simulating Nexus IQ scan outcome (medium in this case)
                    def scanResult = "${env.NEXUS_IQ_RESULT}"
                    
                    if (scanResult == "medium") {
                        // Mark the build as SUCCESS (Green) but we will handle this condition
                        currentBuild.result = 'SUCCESS'
                        
                        // Use `catchError` to allow the build to continue, but indicate the stage has issues
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            // Mark the stage as having an issue, which will turn it yellow
                            currentBuild.description = "Medium Issues Found in Nexus IQ Scan"
                            echo "Warning: Medium issues found in Nexus IQ scan."
                        }
                    } else {
                        // If there are no issues, simply continue
                        echo "Nexus IQ scan passed with no issues."
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building the project...'
                // Simulate the build process
                sh 'echo "Build process complete."'
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'Deploying the project...'
                // Simulate the deployment process
                sh 'echo "Deployment complete."'
            }
        }
    }

    post {
        success {
            script {
                // Ensure overall build remains green
                currentBuild.result = 'SUCCESS'
                echo "Pipeline completed successfully!"
            }
        }
        failure {
            script {
                currentBuild.result = 'FAILURE'
                echo "Pipeline execution failed."
            }
        }
    }
}

pipeline {
    agent any
    environment {
        // Assume these variables represent the result of the Nexus IQ scan
        NEXUS_IQ_RESULT = "medium"  // Can be "low", "medium", "high", etc.
    }
    stages {
        stage('Nexus IQ Scan') {
            steps {
                script {
                    // Simulating Nexus IQ scan output
                    echo "Running Nexus IQ scan..."
                    // Set a result based on the simulated scan outcome (medium in this case)
                    def scanResult = "${env.NEXUS_IQ_RESULT}"
                    
                    if (scanResult == "medium") {
                        // Change stage color to yellow using currentBuild.result
                        currentBuild.result = 'SUCCESS'  // Mark build as successful
                        // Set a custom description to reflect the result
                        currentBuild.description = "Medium Issues Found in Nexus IQ Scan"
                        // Simulate echoing a warning message
                        echo "Warning: Medium issues found in the Nexus IQ scan."
                        // Change the stage color (yellow in this case)
                        script {
                            // Forcefully set the stage color to yellow using input or error actions
                            currentBuild.displayName = "Scan Completed - Medium Issues"
                        }
                    } else {
                        // If no issues or other types of issues, proceed normally
                        echo "No medium issues found, proceeding."
                    }
                }
            }
        }
        stage('Build') {
            steps {
                echo 'Building the project...'
                // Simulate build process
                sh 'echo "Build process complete."'
            }
        }
    }
    post {
        success {
            script {
                echo "Pipeline completed successfully!"
            }
        }
        failure {
            script {
                echo "Pipeline failed."
            }
        }
    }
}








pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                script {
                    // Shell command and update build description
                    def result = sh(script: 'echo "Building version 1.0.0..."', returnStdout: true).trim()
                    currentBuild.description = "Build stage: ${result}"
                    echo "Build step executed."
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Shell command and update build description
                    def result = sh(script: 'echo "Running tests..."', returnStdout: true).trim()
                    currentBuild.description += "<br>Test stage: ${result}"
                    echo "Test step executed."
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Shell command and update build description
                    def result = sh(script: 'echo "Deploying to prod..."', returnStdout: true).trim()
                    currentBuild.description += "<br>Deploy stage: ${result}"
                    echo "Deploy step executed."
                }
            }
        }
    }
    post {
        success {
            script {
                currentBuild.description += "<br>Status: SUCCESS"
            }
        }
        failure {
            script {
                currentBuild.description += "<br>Status: FAILURE"
            }
        }
    }
}



pipeline {
    agent any
    stages {
        stage('Log with Echo') {
            steps {
                script {
                    def stageName = "Build Stage"
                    echo "[INFO] Starting ${stageName}"
                    echo "[WARNING] A potential issue detected in ${stageName}"
                    echo "[ERROR] A critical error occurred in ${stageName}"
                }
            }
        }
    }
}



pipeline {
    agent any
    stages {
        stage('Initialize Logger') {
            steps {
                script {
                    // Import the logger library
                    import java.util.logging.Logger
                    
                    // Create a logger object
                    def logger = Logger.getLogger("JenkinsPipelineLogger")

                    // Log messages
                    logger.info("INFO: Starting the pipeline execution.")
                    logger.warning("WARNING: This is a warning message.")
                    logger.severe("ERROR: This is an error message.")
                }
            }
        }
        stage('Perform Task') {
            steps {
                script {
                    // Continue using the logger object
                    def logger = Logger.getLogger("JenkinsPipelineLogger")
                    logger.info("INFO: Executing some tasks in this stage...")
                    echo "Task executed successfully."
                }
            }
        }
    }
}


cf apps | for /f "tokens=1" %A in ('findstr /r "^[A-Za-z]"') do @echo %A >> test.txt

To add these parameters in a Jenkins job using the **"Add Parameters"** feature, you can follow these steps:

### 1. Adding Platform Parameters:
- **Dropdown 1 (OS Selection)**:
  - Go to your Jenkins job, click on **"Configure"**.
  - Scroll down to **"This project is parameterized"**, check the box.
  - Click on **"Add Parameter"** and select **"Choice Parameter"**.
  - For the **"Name"**, use something like `PLATFORM_OS`.
  - In the **Choices** section, add the operating systems:  
    ```
    Windows
    macOS
    Android
    ```

- **Dropdown 2 (Version Selection)**:
  - Click on **"Add Parameter"** again, and select **"Choice Parameter"**.
  - For the **"Name"**, use something like `PLATFORM_VERSION`.
  - In the **Choices** section, add the corresponding OS versions:
    ```
    Windows 10
    Windows 11
    macOS Big Sur
    macOS Monterey
    Android 11
    Android 12
    ```

### 2. Adding Browser Parameters:
- **Dropdown 1 (Browser Selection)**:
  - Click on **"Add Parameter"** and select **"Choice Parameter"**.
  - For the **"Name"**, use something like `BROWSER_TYPE`.
  - In the **Choices** section, add the browsers:
    ```
    Chrome
    Edge
    Firefox
    ```

- **Dropdown 2 (Browser Version)**:
  - Click on **"Add Parameter"** again, and select **"Choice Parameter"**.
  - For the **"Name"**, use something like `BROWSER_VERSION`.
  - In the **Choices** section, add the versions:
    ```
    121
    122
    latest
    ```

### Optional: Cascading Parameters
If you want to have the second dropdown (version) dependent on the first dropdown (OS/Browser), Jenkins doesn’t support this natively. You can achieve cascading dropdowns with the **"Active Choices"** plugin, which allows dynamic parameters based on the selection of previous ones. This would require scripting within the parameter configuration.
new:

implementation 'com.google.guava:guava:32.1.1-jre'
